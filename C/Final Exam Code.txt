#define _CRT_SECURE_NO_WARNINGS // Visual Studio related, you can remove if you're not using VS
#include <stdio.h>



struct MEASUREMENT
{
	float relativeHumidity;
	float temperature;
	char timestamp[20];
};
void printMeasurementData(struct MEASUREMENT measurements[], int size);
float calculateAverageTemperature(struct MEASUREMENT measurements[], int size);

int main()
{
	struct MEASUREMENT measurements[5];

	// Create some data for testing
	struct MEASUREMENT m1 = { 0.85, 23.5, "23.07.2019 08:00" };
	struct MEASUREMENT m2 = { 0.71, 19.0, "04.08.2019 10:21" };
	struct MEASUREMENT m3 = { 0.43, 10.2, "07.08.2019 02.00" };
	struct MEASUREMENT m4 = { 0.51, 14.3, "20.08.2019 14:45" };
	struct MEASUREMENT m5 = { 0.62, 10.9, "01.09.2019 01:00" };

	measurements[0] = m1;
	measurements[1] = m2;
	measurements[2] = m3;
	measurements[3] = m4;
	measurements[4] = m5;
	// print all measurement data:
	printMeasurementData(measurements, 5);
	// Calculate the average temperature:
	float averageTemp = calculateAverageTemperature(measurements, 5);
	// print the avg temperature:
	printf("The Average Temperature of the Values is %.2f\n", averageTemp);
	// 1. Define a struct called MEASUREMENTS with three member variables: relativeHumidity, temperature and timestamp
	// 2. Implement two functions:
	// - printMeasurementData prints the contents of the given struct MEASUREMENT array to the console
	// - calculateAverageTemperature gets the struct MEASUREMENT array and its size as a parameter and returns the average temperature
}

void printMeasurementData(struct MEASUREMENT measurements[], int size)
{
	printf("Printing Measurements\n");

	for (int i = 0; i < size; i++)
	{
		printf("%f,%f,%s\n", measurements[i].relativeHumidity, measurements[i].temperature, measurements[i].timestamp);
	}
}

float calculateAverageTemperature(struct MEASUREMENT measurements[], int size)
{
	float temperature = 0.0;
	for (int i = 0; i < size; i++)
	{
		temperature += measurements[i].temperature;
	}
	float avgtemp = temperature / size;
	return avgtemp;
}